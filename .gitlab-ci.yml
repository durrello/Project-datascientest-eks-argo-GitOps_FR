# .gitlab-ci.yml
stages:
  - app-build
  - app-deploy
  - infra-validate
  - infra-plan
  - infra-deploy

variables:
  # App variables
  DOCKER_IMAGE_NAME: reddit-clone-app
  DOCKER_TAG: ${CI_COMMIT_SHORT_SHA}
  APP_ROOT: ${CI_PROJECT_DIR}/Livrables/app
  
  # Infrastructure variables
  TF_ROOT: ${CI_PROJECT_DIR}/Livrables/infra
  TF_STATE_NAME: ${CI_COMMIT_REF_SLUG}
  TF_CACHE_KEY: ${CI_COMMIT_REF_SLUG}

# =============================================================================
# APP PIPELINE - Complete separate workflow
# =============================================================================

# Build Docker image when app code changes
app-build:
  stage: app-build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
  script:
    - cd ${APP_ROOT}
    - echo "Building Docker image for app..."
    - docker build -t ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG} .
    - docker build -t ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:latest .
    - echo "Pushing Docker image to registry..."
    - docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG}
    - docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:latest
    - echo "Successfully pushed ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG}"
  artifacts:
    reports:
      dotenv: build.env
    expire_in: 1 hour
  after_script:
    - docker logout
    - echo "IMAGE_TAG=${DOCKER_TAG}" > build.env
    - echo "FULL_IMAGE_NAME=${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG}" >> build.env
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - Livrables/app/**/*
    - if: '$CI_COMMIT_BRANCH'
      changes:
        - Livrables/app/**/*

# # Test the built image (optional)
# app-test:
#   stage: app-build
#   image: docker:24.0.5
#   services:
#     - docker:24.0.5-dind
#   variables:
#     DOCKER_HOST: tcp://docker:2376
#     DOCKER_TLS_CERTDIR: "/certs"
#   script:
#     - echo "Testing Docker image..."
#     - docker pull ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG}
#     - docker run --rm ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${DOCKER_TAG} echo "Container test successful"
#   dependencies:
#     - app-build
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#       changes:
#         - Livrables/app/**/*
#     - if: '$CI_COMMIT_BRANCH'
#       changes:
#         - Livrables/app/**/*


# =============================================================================
# INFRASTRUCTURE PIPELINE - Complete separate workflow
# =============================================================================

.terraform-base:
  image:
    name: hashicorp/terraform:latest
    entrypoint: [""]
  cache:
    key: "${TF_CACHE_KEY}"
    paths:
      - ${TF_ROOT}/.terraform
      - ${TF_ROOT}/.terraform.lock.hcl
  before_script:
    - cd ${TF_ROOT}
    - terraform --version
    - terraform init
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - Livrables/infra/**/*
    - if: '$CI_COMMIT_BRANCH'
      changes:
        - Livrables/infra/**/*

# Validate Terraform configuration
infra-validate:
  stage: infra-validate
  extends: .terraform-base
  script:
    - terraform validate
    - terraform fmt -check

# Security scanning for Terraform
infra-security-scan:
  stage: infra-validate
  image:
    name: aquasec/tfsec:latest
    entrypoint: [""]
  script:
    - tfsec ${TF_ROOT} --format junit --out tfsec-report.xml || true
  artifacts:
    reports:
      junit: tfsec-report.xml
    when: always
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - Livrables/infra/**/*
    - if: '$CI_COMMIT_BRANCH'
      changes:
        - Livrables/infra/**/*
  allow_failure: true

# Plan Terraform changes
infra-plan:
  stage: infra-plan
  extends: .terraform-base
  script:
    - terraform plan -input=false -out=tfplan
  artifacts:
    name: terraform-plan-${CI_COMMIT_SHORT_SHA}
    paths:
      - ${TF_ROOT}/tfplan
    expire_in: 7 days

# Apply infrastructure changes to staging
infra-apply-staging:
  stage: infra-deploy
  extends: .terraform-base
  script:
    - terraform apply -input=false tfplan
  dependencies:
    - infra-plan
  environment:
    name: staging-infra
    on_stop: infra-destroy-staging
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      changes:
        - Livrables/infra/**/*
      when: on_success
    - if: '$CI_COMMIT_BRANCH != "develop"'
      changes:
        - Livrables/infra/**/*
      when: manual

# Apply infrastructure changes to production
infra-apply-production:
  stage: infra-deploy
  extends: .terraform-base
  script:
    - terraform apply -input=false tfplan
  dependencies:
    - infra-plan
  environment:
    name: production-infra
    on_stop: infra-destroy-production
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"'
      changes:
        - Livrables/infra/**/*
      when: manual

# Destroy staging infrastructure
infra-destroy-staging:
  stage: infra-deploy
  extends: .terraform-base
  script:
    - terraform destroy -auto-approve
  environment:
    name: staging-infra
    action: stop
  rules:
    - if: '$CI_COMMIT_BRANCH'
      changes:
        - Livrables/infra/**/*
      when: manual

# Destroy production infrastructure
infra-destroy-production:
  stage: infra-deploy
  extends: .terraform-base
  script:
    - terraform destroy -auto-approve
  environment:
    name: production-infra
    action: stop
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"'
      changes:
        - Livrables/infra/**/*
      when: manual
      
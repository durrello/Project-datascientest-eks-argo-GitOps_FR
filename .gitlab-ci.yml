# .gitlab-ci.yml
stages:
  - validate
  - plan
  - deploy

variables:
  TF_ROOT: ${CI_PROJECT_DIR}/Livrables/infra
  TF_STATE_NAME: ${CI_COMMIT_REF_SLUG}
  TF_CACHE_KEY: ${CI_COMMIT_REF_SLUG}
  
# Use the official Terraform image with empty entrypoint
image:
  name: hashicorp/terraform:latest
  entrypoint:
    - ""

# Cache Terraform plugins and modules
cache:
  key: "${TF_CACHE_KEY}"
  paths:
    - ${TF_ROOT}/.terraform
    - ${TF_ROOT}/.terraform.lock.hcl

before_script:
  - cd ${TF_ROOT}
  - terraform --version
  - terraform init

# Validate Terraform configuration
validate:
  stage: validate
  script:
    - terraform validate
    - terraform fmt -check
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'

# Plan Terraform changes
plan:
  stage: plan
  script:
    - terraform plan -input=false -out=tfplan
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/tfplan
    expire_in: 7 days
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'

# Apply Terraform changes (manual for production)
apply:
  stage: deploy
  script:
    - terraform apply -input=false tfplan
  dependencies:
    - plan
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: manual
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: on_success
  environment:
    name: $CI_COMMIT_REF_SLUG
    on_stop: destroy

# Destroy infrastructure (manual only)
destroy:
  stage: deploy
  script:
    - terraform destroy -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: manual
      allow_failure: false
  environment:
    name: $CI_COMMIT_REF_SLUG
    action: stop

# Additional job for security scanning (optional)
tfsec:
  stage: validate
  image:
    name: aquasec/tfsec:latest
    entrypoint: [""]
  script:
    - tfsec ${TF_ROOT} --format junit --out tfsec-report.xml || true
  artifacts:
    reports:
      junit: tfsec-report.xml
    when: always
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH'
  allow_failure: true
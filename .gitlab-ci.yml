# .gitlab-ci.yml
image:
  name: hashicorp/terraform:1.6
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

variables:
  TF_ROOT: ${CI_PROJECT_DIR}
  TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/default
  TF_VAR_aws_region: "us-east-1"
  TF_VAR_cluster_name: "eks-${CI_ENVIRONMENT_SLUG}"
  TF_VAR_vpc_name: "vpc-${CI_ENVIRONMENT_SLUG}"

before_script:
  - cd ${TF_ROOT}
  - terraform --version
  - terraform init -backend-config="address=${TF_ADDRESS}" -backend-config="lock_address=${TF_ADDRESS}/lock" -backend-config="unlock_address=${TF_ADDRESS}/lock" -backend-config="username=${GITLAB_USER_LOGIN}" -backend-config="password=${CI_JOB_TOKEN}" -backend-config="lock_method=POST" -backend-config="unlock_method=DELETE" -backend-config="retry_wait_min=5"

cache:
  key: "${TF_ROOT}"
  paths:
    - ${TF_ROOT}/.terraform

stages:
  - validate
  - plan
  - apply
  - destroy

validate:
  stage: validate
  script:
    - terraform fmt -check
    - terraform validate
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

plan:
  stage: plan
  script:
    - terraform plan -out="planfile" -var="key_pair_name=${AWS_KEY_PAIR_NAME}"
  dependencies:
    - validate
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/planfile
    reports:
      terraform: ${TF_ROOT}/planfile.json
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

plan:json:
  stage: plan
  extends: plan
  script:
    - terraform plan -out="planfile" -var="key_pair_name=${AWS_KEY_PAIR_NAME}"
    - terraform show -json planfile > planfile.json
  artifacts:
    name: plan-json
    paths:
      - ${TF_ROOT}/planfile.json

apply:
  stage: apply
  script:
    - terraform apply -input=false "planfile"
  dependencies:
    - plan
  environment:
    name: production
    action: start
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: false

destroy:
  stage: destroy
  script:
    - terraform destroy -auto-approve -var="key_pair_name=${AWS_KEY_PAIR_NAME}"
  environment:
    name: production
    action: stop
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: false
  dependencies: []
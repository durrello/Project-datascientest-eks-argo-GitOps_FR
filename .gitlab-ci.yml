stages:
  - validate
  - security
  - plan
  - apply
  - destroy

variables:
  TF_ROOT: "Livrables/EKS-TF"
  GIT_SUBMODULE_STRATEGY: recursive

default:
  image: alpine:3.18
  before_script:
    - apk add --no-cache bash curl unzip git jq python3 py3-pip libc6-compat
    # Install AWS CLI v2
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
    - aws --version
    # Terraform
    - curl -fsSL https://releases.hashicorp.com/terraform/1.6.6/terraform_1.6.6_linux_amd64.zip -o terraform.zip
    - unzip terraform.zip -d /usr/local/bin/
    # Export variables
    - export AWS_ACCESS_KEY_ID="$TF_VAR_AWS_ACCESS_KEY_ID"
    - export AWS_SECRET_ACCESS_KEY="$TF_VAR_AWS_SECRET_ACCESS_KEY"
    - export AWS_DEFAULT_REGION="$TF_VAR_AWS_DEFAULT_REGION"


# -----------------
# 1. Terraform validate
# -----------------
terraform:validate:
  stage: validate
  script:
    - cd $TF_ROOT
    - terraform init -backend=false
    - terraform validate

# -----------------
# 2. Security Scan with Trivy
# -----------------
terraform:security-scan:
  stage: security
  image: alpine:3.18
  before_script:
    - apk add --no-cache bash curl unzip git
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
  script:
    - cd $TF_ROOT
    - ./trivy config . --exit-code 1 --severity HIGH,CRITICAL || echo "⚠️ Security issues found"

# -----------------
# 3. Terraform Plan (manual choice)
# -----------------
terraform:plan:
  stage: plan
  script:
    - cd $TF_ROOT
    - terraform init
    - terraform plan -out=tfplan
  artifacts:
    paths:
      - $TF_ROOT/tfplan
  when: manual

# -----------------
# 3b. Terraform Destroy (alternative to plan)
# -----------------
terraform:destroy-direct:
  stage: plan
  script:
    - cd $TF_ROOT
    - terraform init
    - terraform destroy -auto-approve
  when: manual
  allow_failure: true

# -----------------
# 4. Terraform Apply (manual)
# -----------------
terraform:apply:
  stage: apply
  script:
    - cd $TF_ROOT
    - terraform apply -auto-approve tfplan
  when: manual
  dependencies:
    - terraform:plan

# -----------------
# 5. Terraform Destroy after Plan (manual)
# -----------------
terraform:destroy-after-plan:
  stage: apply
  script:
    - cd $TF_ROOT
    - terraform init
    - terraform destroy -auto-approve
  when: manual
  dependencies:
    - terraform:plan
  allow_failure: true

# -----------------
# 6. Terraform Destroy after Apply (manual)
# -----------------
terraform:destroy-after-apply:
  stage: destroy
  script:
    - cd $TF_ROOT
    - terraform init
    - terraform destroy -auto-approve
  when: manual
  dependencies:
    - terraform:apply
  allow_failure: true